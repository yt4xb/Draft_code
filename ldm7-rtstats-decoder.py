import sys
import pymongo

'''
Copyright (C) 2018 University of Virginia. All rights reserved.

file      ldm7-rtstats-decoder.py
author    Ying Lin
version   1.0
date      Nov. 1, 2018

brief     parses log files generated by LDM7 receivers on a specified
          aggregate size basis.
usage     python ldm7-rtstats-decoder.py <logfile> <csvfile-to-write>
the file sent from receiver is aggregated data per min,
the thing mothership side need to do is read these data and write into db
'''

# read file
def readfile(filename):
    with open(filename, 'r') as infile:
        data = []
        for i, line in infile:
            data[i] = line.split()
    return data

# connect to mongodb and insert data
def insertData(data):
    for line in data:
        date = line[0]
        completeSize = line[1]
        receivedSize = line[2]
        receivedDelay = line[3]
        completeProd = line[4]
        receivedProd = line[5]
        feedtype = line[6]
        hostname = line[7]

        connection = pymongo.MongoClient('127.0.0.1',27017)
        db = connection.dashboard
        col = db.test
        col.insert({'date': date, 'completeSize': completeSize,
                    'receivedSize': receivedSize, 'receivedDelay': receivedDelay,
                    'completeProd': completeProd, 'receivedProd': receivedProd,
                    'feedtype': feedtype, 'hostname': hostname})
    print("finished")

def writefile(data, filename):
    with open(filename, 'w') as outfile:
        outfile.writerow(['date', 'completeSize', 'receivedSize',
                          'receivedDelay', 'completeProd', 'receivedProd',
                          'feedtype', 'hostname'])
        for line in data:
            date = line[0]
            completeSize = line[1]
            receivedSize = line[2]
            receivedDelay = line[3]
            completeProd = line[4]
            receivedProd = line[5]
            feedtype = line[6]
            hostname = line[7]
            if receivedDelay > 0:
                thru = float(receivedSize/receivedDelay) * 8
            else:
                thru = -1
            if completeProd > 0:
                ffdr_num = float(receivedProd / completeProd) * 100
            else:
                ffdr_num = -1
            if completeSize > 0:
                ffdr_size = float(receivedSize / completeSize) * 100
            else:
                ffdr_size = -1
            tmp_str = str(date) + ',' + str(completeSize) + ',' \
                    + str(receivedSize) + ',' + str(receivedDelay) + ',' \
                    + str(completeProd) + ',' + str(receivedProd) + ',' \
                    + str(thru) + ',' + str(ffdr_num) + ',' \
                    + str(ffdr_size) + ',' + feedtype + ',' + hostname + '\n'
            outfile.write(tmp_str)


def main(pqfile, csvfile):
   data = readfile(pqfile)
   writefile(data, csvfile)

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
